[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "iso-week-date"
version = "1.2.0"
description = "Toolkit to work with str representing ISO Week date format"

license = {file = "LICENSE"}
readme = "README.md"
requires-python = ">=3.8"
authors = [{name = "Francesco Bruzzesi"}]

dependencies = [
    "typing-extensions>=4.4.0; python_version < '3.12'",
]

classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

[project.urls]
repository = "https://github.com/fbruzzesi/iso-week-date"
issue-tracker = "https://github.com/fbruzzesi/iso-week-date/issues"
documentation = "https://fbruzzesi.github.io/iso-week-date/"

[project.optional-dependencies]
pandas = [
    "pandas>=1.0.0",
]

polars = [
    "polars>=0.18.0",
]

pydantic = [
    "pydantic>=2.4.0",
]

dev = [
    "pre-commit==2.21.0",
    "hatch"
]

lint = [
    "ruff>=0.4.0"
]

docs = [
    "mkdocs>=1.4.2",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.20.0",
    "mkdocs-autorefs",
]

test = [
    "interrogate>=1.5.0",
    "pytest==7.2.0",
    "pytest-xdist==3.2.1",
    "coverage==7.2.1",
]

all = ["iso-week-date[pandas,polars,pydantic]"]
all-dev = ["iso-week-date[pandas,polars,pydantic,dev,lint,test,docs]"]

[tool.hatch.build.targets.sdist]
only-include = ["iso_week_date"]

[tool.hatch.build.targets.wheel]
packages = ["iso_week_date"]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D100",  # Checks for undocumented public module definitions.
    "E731",  # Checks for lambda expressions which are assigned to a variable.
    "EM101",  # Checks for the use of string literals in exception constructors.
    "ISC001",  # Checks for implicitly concatenated strings on a single line.
    "TRY003",  # Checks for long exception messages that are not defined in the exception class itself.
    ]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ANN", "D", "S101", "PT006", "PT007"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.interrogate]
ignore-nested-functions = true
ignore-module = true
ignore-init-method = true
ignore-private = true
ignore-magic = true
ignore-property-decorators = true
fail-under = 95
verbose = 2 # 0 (minimal output), 1 (-v), 2 (-vv)

[tool.mypy]
ignore_missing_imports = true

[tool.coverage.run]
source = ["iso_week_date/"]
